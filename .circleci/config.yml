# Golang CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-go/ for more details
version: 2.1

executors:
  golang:
    docker:
      - image: circleci/golang:1.14.7
    working_directory: /go/src/github.com/certikfoundation/shentu
  mac:
    macos:
      xcode: "10.3.0"
    working_directory: /Users/distiller/project/src/github.com/certikfoundation/shentu
    environment:
      GO_VERSION: "1.14.7"
commands:
  make:
    parameters:
      description:
        type: string
      target:
        type: string
    steps:
      - attach_workspace:
          at: /tmp/bin
      - checkout
      - restore_cache:
          name: "Restore go modules cache"
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}
      - run:
          name: << parameters.description >>
          command: |
            export BINDIR=/tmp/bin
            make << parameters.target >>
  mac-set-env:
    steps:
      - run:
          name: "Set environment"
          command: | 
            echo 'export PATH=$PATH:$HOME/go/bin' >> $BASH_ENV
            echo 'export GOPATH=$HOME/project' >> $BASH_ENV
            echo 'export PATH=$PATH:$HOME/go/bin:$GOPATH/bin' >> $BASH_ENV
            echo 'export GO111MODULE=on' 
jobs:
  setup-dependencies:
    executor: golang
    steps:
      - checkout
      - restore_cache:
          name: "Restore go modules cache"
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}
      - run:
          name: Cache go modules
          command: make go-mod-cache
      - run:
          name: Build
          command: make build
      - run:
          name: "Git garbage collection"
          command: git gc
      - run:
          name: "Build tools binaries"
          command: |
            make tools
      - save_cache:
          name: "Save go modules cache"
          key: go-mod-v1-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"
      - run:
          command: |
            mkdir -p /tmp/bin
            cp -r /go/bin/* /tmp/bin
      - persist_to_workspace:
          root: "/tmp/bin"
          paths:
            - "."

  test-sim-nondeterminism:
    executor: golang
    steps:
      - make:
          target: test-sim-nondeterminism
          description: "Test Shentu non-determinism simulations"
  
  test-sim-fast:
    executor: golang
    steps:
      - make:
          target: test-sim-fast
          description: "Test Shentu fast simulations"

  test-sim-import-export:
    executor: golang
    steps:
      - make:
          target: test-sim-import-export
          description: "Test Shentu import/export simulation"

  test-sim-after-import:
    executor: golang
    steps:
      - make:
          target: test-sim-after-import
          description: "Test Shentu simulation after importing state"

  test-sim-multi-seed-short:
    executor: golang
    steps:
      - make:
          target: test-sim-multi-seed-short
          description: "Test Shentu multi-seed simulation (short-lived)"

  test-sim-multi-seed-long:
    executor: golang
    steps:
      - make:
          target: test-sim-multi-seed-long
          description: "Test Shentu multi-seed simulation (long-lived)"
  test-cover:
    executor: golang
    parallelism: 4
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}
      - run:
          name: Run tests with coverage
          command: |
            export VERSION="$(git describe --tags --long | sed 's/v\(.*\)/\1/')"
            export GO111MODULE=on
            mkdir -p /tmp/logs /tmp/workspace/profiles
            for pkg in $(go list ./... | grep -v '/simulation' | circleci tests split); do
              id=$(echo "$pkg" | sed 's|[/.]|_|g')
              go test -mod=readonly -timeout 8m -race -coverprofile=/tmp/workspace/profiles/$id.out -covermode=atomic -tags='ledger test_ledger_mock' "$pkg" | tee "/tmp/logs/$id-$RANDOM.log"
            done
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - "profiles/*"
      - store_artifacts:
          path: /tmp/logs

  release:
    docker:
      - image: circleci/golang:1.14.7
    steps:
      - checkout
      - run:
          name: release
          command: |
            export BUILD_TAGS="netgo ledger"
            export GOSUM=$(sha256sum go.sum | cut -d ' ' -f1)
            curl -sL https://git.io/goreleaser | bash
  upload-coverage:
    executor: golang
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - run:
          name: gather
          command: |
            set -ex
            echo "--> Concatenating profiles:"
            ls /tmp/workspace/profiles/
            echo "mode: atomic" > coverage.txt
            for prof in $(ls /tmp/workspace/profiles/); do
              tail -n +2 /tmp/workspace/profiles/"$prof" >> coverage.txt
            done
      - run:
          name: filter out DONTCOVER
          command: |
            excludelist="$(find . -type f -name '*.go' | xargs grep -l 'DONTCOVER')"
            for filename in ${excludelist}; do
              filename=$(echo $filename | sed 's/^./github.com\/cosmos\/gaia/g')
              echo "Excluding ${filename} from coverage report..."
              sed -i.bak "/$(echo $filename | sed 's/\//\\\//g')/d" coverage.txt
            done
      - run:
          name: upload
          command: bash <(curl -s https://codecov.io/bash) -f coverage.txt
  macos-ci:
    executor: mac
    steps:
      - mac-set-env
      - run:
          name: Install go
          command: |
            source $BASH_ENV
            curl -L -O https://dl.google.com/go/go$GO_VERSION.darwin-amd64.tar.gz
            tar -C $HOME -xzf go$GO_VERSION.darwin-amd64.tar.gz
            rm go$GO_VERSION.darwin-amd64.tar.gz
            go version
      - checkout
      - run:
          name: Install SDK
          command: |
            source $BASH_ENV
            make tools
            make install
      - run:
          name: Test full shentu simulation
          command: |
            source $BASH_ENV
            make sim
workflows:
  version: 2.1
  test-suite:
    jobs:
      - macos-ci:
          filters:
            branches:
              only:
                - master
                - develop
      - setup-dependencies:
          # filters here are needed to enable this job also for tags
          filters:
            tags:
              only:
                - /^v.*/
      - test-sim-nondeterminism:
          requires:
            - setup-dependencies
      - test-sim-fast:
          requires:
            - setup-dependencies
      - test-sim-import-export:
          requires:
            - setup-dependencies
      - test-sim-multi-seed-short:
          requires:
            - setup-dependencies
      - test-sim-multi-seed-long:
          requires:
            - setup-dependencies
          # These filters ensure that the long sim only runs during release
          filters:
            branches:
              ignore: /.*/
            tags:
              only:
                - /^v.*/
      - test-cover:
          requires:
            - setup-dependencies
      - upload-coverage:
          requires:
            - test-cover